<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Backup Manager - Backups</title>
  <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
  <style>
    body {
      font-family: 'Inter', sans-serif;
      background-color: #1a1b1e;
      color: #ffffff;
    }
    .fade-in {
      animation: fadeIn 0.5s ease-in-out;
    }
    @keyframes fadeIn {
      from { opacity: 0; }
      to { opacity: 1; }
    }
    #console {
      height: 200px;
      overflow-y: auto;
      background-color: #1e1e1e;
      color: #ffffff;
      padding: 10px;
      border-radius: 8px;
      font-family: 'Consolas', monospace;
      border: 1px solid #2d2d2d;
    }
    .card {
      background-color: #25262b;
      border: 1px solid #2d2d2d;
      border-radius: 8px;
      transition: all 0.3s ease;
    }
    .card:hover {
      transform: translateY(-2px);
      border-color: #5865f2;
    }
    .btn {
      padding: 0.5rem 1rem;
      border-radius: 6px;
      font-weight: 500;
      transition: all 0.2s ease;
    }
    .btn-primary {
      background-color: #5865f2;
      color: white;
    }
    .btn-primary:hover {
      background-color: #4752c4;
    }
    .btn-danger {
      background-color: #f04747;
      color: white;
    }
    .btn-danger:hover {
      background-color: #d84040;
    }
    .input-field {
      background-color: #1e1f22;
      border: 1px solid #2d2d2d;
      color: white;
      padding: 0.5rem;
      border-radius: 4px;
      width: 100%;
    }
    .input-field:focus {
      border-color: #5865f2;
      outline: none;
    }
    #toast {
      position: fixed;
      bottom: 20px;
      right: 20px;
      padding: 16px 24px;
      border-radius: 8px;
      color: white;
      font-weight: 500;
      opacity: 0;
      transform: translateY(100%);
      transition: all 0.3s ease;
      z-index: 1000;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }
    #toast.show {
      opacity: 1;
      transform: translateY(0);
    }
    #toast.success {
      background-color: #3ba55c;
    }
    #toast.error {
      background-color: #ed4245;
    }
    .toast-content {
      display: flex;
      align-items: center;
      gap: 8px;
    }
    .toast-icon {
      font-size: 1.2em;
    }
  </style>
</head>
<body class="min-h-screen p-4">
  <div class="container mx-auto max-w-6xl">
    <!-- Header -->
    <div class="flex justify-between items-center mb-8">
      <h1 class="text-2xl font-bold">Backup Manager</h1>
      <div class="flex gap-4">
        <div class="card p-3">
          <span class="block text-xl font-bold"><%= backups.length %></span>
          <span class="text-sm text-gray-400">Total Backups</span>
        </div>
      </div>
    </div>

    <!-- Main Grid -->
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 mb-8">
      <% backups.forEach(backup => { %>
        <div class="card p-4 fade-in">
          <div class="flex items-center gap-3 mb-3">
            <div class="w-10 h-10 rounded-full bg-gray-700 flex items-center justify-center">
              <i class="fas <%= backup.type === 'guild' ? 'fa-server' : 'fa-user' %> text-gray-400"></i>
            </div>
            <div class="min-w-0">
              <h3 class="font-medium truncate"><%= backup.name %></h3>
              <span class="text-sm text-gray-400">
                <%= backup.type === 'guild' ? 'Server' : 'DM' %> Backup
              </span>
            </div>
          </div>
          <div class="text-sm text-gray-400 mb-3">
            <div>ID: <%= backup.id %></div>
            <div>Created: <%= new Date(backup.createdAt).toLocaleString() %></div>
          </div>
          <div class="flex gap-2">
            <button onclick="downloadBackup('<%= backup.id %>')" class="btn btn-primary flex-1">
              <i class="fas fa-download mr-2"></i> Download
            </button>
            <button onclick="deleteBackup('<%= backup.id %>')" class="btn btn-danger flex-1">
              <i class="fas fa-trash-alt mr-2"></i> Delete
            </button>
          </div>
        </div>
      <% }) %>
    </div>

    <!-- Console Section -->
    <div class="mb-8">
      <h2 class="text-xl font-medium mb-3">Console</h2>
      <div id="console"></div>
    </div>
  </div>

  <!-- Toast -->
  <div id="toast" class="hidden">
    <div class="toast-content">
      <i class="toast-icon"></i>
      <span class="toast-message"></span>
    </div>
  </div>

  <script>
    const consoleDiv = document.getElementById('console');

    function logToConsole(message, isError = false) {
      const logEntry = document.createElement('div');
      logEntry.textContent = `[${new Date().toLocaleTimeString()}] ${message}`;
      logEntry.style.color = isError ? '#ff4444' : '#ffffff';
      consoleDiv.appendChild(logEntry);
      consoleDiv.scrollTop = consoleDiv.scrollHeight;
    }

    function showToast(message, isError = false) {
      const toast = document.getElementById('toast');
      const icon = toast.querySelector('.toast-icon');
      const messageEl = toast.querySelector('.toast-message');
      
      // Set message and icon
      messageEl.textContent = message;
      icon.className = 'toast-icon fas ' + (isError ? 'fa-times-circle' : 'fa-check-circle');
      
      // Set toast type
      toast.className = isError ? 'error show' : 'success show';
      
      // Hide after 3 seconds
      setTimeout(() => {
        toast.className = 'hidden';
      }, 3000);
    }

    async function downloadBackup(backupId) {
      logToConsole(`Starting download of backup ${backupId}...`);
      try {
        const response = await fetch(`/download-backup/${backupId}`);
        if (response.ok) {
          const blob = await response.blob();
          const url = window.URL.createObjectURL(blob);
          const a = document.createElement('a');
          a.href = url;
          a.download = `backup-${backupId}.json`;
          document.body.appendChild(a);
          a.click();
          window.URL.revokeObjectURL(url);
          document.body.removeChild(a);
          showToast('Backup downloaded successfully!');
          logToConsole('Backup downloaded successfully!');
        } else {
          const data = await response.json();
          throw new Error(data.error || 'Download failed');
        }
      } catch (error) {
        showToast(error.message, true);
        logToConsole(`Download failed: ${error.message}`, true);
      }
    }

    async function deleteBackup(backupId) {
      if (!confirm('Are you sure you want to delete this backup?')) {
        return;
      }

      logToConsole(`Deleting backup ${backupId}...`);
      try {
        const response = await fetch(`/delete-backup/${backupId}`, {
          method: 'DELETE'
        });
        
        if (response.ok) {
          showToast('Backup deleted successfully!');
          logToConsole('Backup deleted successfully!');
          // Remove the backup card from the UI
          const card = document.querySelector(`[data-backup-id="${backupId}"]`);
          if (card) {
            card.remove();
          } else {
            location.reload(); // Fallback: reload the page if card not found
          }
        } else {
          const data = await response.json();
          throw new Error(data.error || 'Delete failed');
        }
      } catch (error) {
        showToast(error.message, true);
        logToConsole(`Delete failed: ${error.message}`, true);
      }
    }
  </script>
</body>
</html>