<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Backup Manager - DMs</title>
  <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
  <style>
    body {
      font-family: 'Inter', sans-serif;
      background-color: #1a1b1e;
      color: #ffffff;
    }
    .fade-in {
      animation: fadeIn 0.5s ease-in-out;
    }
    @keyframes fadeIn {
      from { opacity: 0; }
      to { opacity: 1; }
    }
    #console {
      height: 200px;
      overflow-y: auto;
      background-color: #1e1e1e;
      color: #ffffff;
      padding: 10px;
      border-radius: 8px;
      font-family: 'Consolas', monospace;
      border: 1px solid #2d2d2d;
    }
    .card {
      background-color: #25262b;
      border: 1px solid #2d2d2d;
      border-radius: 8px;
      transition: all 0.3s ease;
    }
    .card:hover {
      transform: translateY(-2px);
      border-color: #5865f2;
    }
    .btn {
      padding: 0.5rem 1rem;
      border-radius: 6px;
      font-weight: 500;
      transition: all 0.2s ease;
    }
    .btn-primary {
      background-color: #5865f2;
      color: white;
    }
    .btn-primary:hover {
      background-color: #4752c4;
    }
    .checkbox-custom {
      width: 1.25rem;
      height: 1.25rem;
      background-color: #1e1f22;
      border: 2px solid #2d2d2d;
      border-radius: 4px;
      transition: all 0.2s ease;
      cursor: pointer;
      position: relative;
    }
    .checkbox-custom:checked {
      background-color: #5865f2;
      border-color: #5865f2;
    }
    .checkbox-custom:checked::after {
      content: 'âœ“';
      position: absolute;
      color: white;
      font-size: 0.875rem;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
    }
  </style>
</head>
<body class="min-h-screen p-4">
  <div class="container mx-auto max-w-6xl">
    <!-- Header -->
    <div class="flex justify-between items-center mb-8">
      <h1 class="text-2xl font-bold">DM Backup Manager</h1>
      <div class="card p-3">
        <span class="block text-xl font-bold"><%= dms.length %></span>
        <span class="text-sm text-gray-400">Total DMs</span>
      </div>
    </div>

    <!-- Main Grid -->
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 mb-8">
      <% dms.forEach(dm => { %>
        <div class="card p-4 fade-in">
          <div class="flex items-center gap-3 mb-3">
            <% if (dm.avatar) { %>
              <img src="<%= dm.avatar %>" alt="<%= dm.name %>" class="w-10 h-10 rounded-full">
            <% } else { %>
              <div class="w-10 h-10 rounded-full bg-gray-700 flex items-center justify-center">
                <i class="fas fa-user text-gray-400"></i>
              </div>
            <% } %>
            <div class="min-w-0">
              <h3 class="font-medium truncate"><%= dm.name %></h3>
              <span class="text-sm text-gray-400">Direct Message</span>
            </div>
          </div>
          <div class="flex items-center gap-2">
            <input type="checkbox" id="dm<%= dm.id %>" value="<%= dm.id %>" 
                   class="checkbox-custom">
            <label for="dm<%= dm.id %>" class="text-sm text-gray-400 cursor-pointer">
              Select for backup
            </label>
          </div>
        </div>
      <% }) %>
    </div>

    <!-- Action Button -->
    <div class="flex justify-center mb-8">
      <button onclick="backupSelectedDMs()" class="btn btn-primary">
        <i class="fas fa-save mr-2"></i> Backup Selected DMs
      </button>
    </div>

    <!-- Console Section -->
    <div class="mb-8">
      <h2 class="text-xl font-medium mb-3">Console</h2>
      <div id="console"></div>
    </div>
  </div>

  <!-- Toast -->
  <div id="toast" class="fixed bottom-4 right-4 p-4 rounded-lg text-white opacity-0 transition-opacity duration-300"></div>

  <script>
    const consoleDiv = document.getElementById('console');
    const toast = document.getElementById('toast');

    function showToast(message, isError = false) {
      toast.textContent = message;
      toast.style.backgroundColor = isError ? '#f04747' : '#3ba55c';
      toast.style.opacity = '1';
      setTimeout(() => {
        toast.style.opacity = '0';
      }, 3000);
    }

    function logToConsole(message, isError = false) {
      const logEntry = document.createElement('div');
      logEntry.textContent = `[${new Date().toLocaleTimeString()}] ${message}`;
      logEntry.style.color = isError ? '#ff4444' : '#ffffff';
      consoleDiv.appendChild(logEntry);
      consoleDiv.scrollTop = consoleDiv.scrollHeight;
    }

    async function backupSelectedDMs() {
      const selectedDMs = Array.from(document.querySelectorAll('input[type="checkbox"]:checked'))
        .map(checkbox => checkbox.value);

      if (selectedDMs.length === 0) {
        showToast('Please select at least one DM to backup', true);
        logToConsole('Please select at least one DM to backup.', true);
        return;
      }

      showToast('Starting backup of selected DMs...');
      logToConsole(`Starting backup of ${selectedDMs.length} selected DMs...`);

      try {
        const response = await fetch('/backup-selected-dms', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ channelIds: selectedDMs }),
        });
        
        const data = await response.json();
        if (response.ok) {
          showToast('Backup completed successfully!');
          logToConsole(`Successfully backed up ${selectedDMs.length} DMs!`);
          // Uncheck all checkboxes after successful backup
          document.querySelectorAll('input[type="checkbox"]').forEach(cb => cb.checked = false);
        } else {
          throw new Error(data.error || 'Backup failed');
        }
      } catch (error) {
        showToast(error.message, true);
        logToConsole(`Backup failed: ${error.message}`, true);
      }
    }
  </script>
</body>
</html>