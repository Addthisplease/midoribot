<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Backup Manager</title>
  <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
  <style>
    body {
      font-family: 'Inter', sans-serif;
      background-color: #1a1b1e;
      color: #ffffff;
    }
    .fade-in {
      animation: fadeIn 0.5s ease-in-out;
    }
    @keyframes fadeIn {
      from { opacity: 0; }
      to { opacity: 1; }
    }
    #console {
      height: 300px;
      overflow-y: auto;
      background-color: #1e1e1e;
      color: #ffffff;
      padding: 15px;
      border-radius: 8px;
      font-family: 'Consolas', monospace;
      border: 1px solid #1f1f1f;
      margin-bottom: 20px;
      font-size: 14px;
      line-height: 1.5;
    }
    #console div {
      margin-bottom: 4px;
    }
    #console .success { color: #3ba55c; }
    #console .error { color: #ed4245; }
    #console .info { color: #5865f2; }
    .card {
      background-color: #25262b;
      border: 1px solid #1f1f1f;
      border-radius: 8px;
      transition: all 0.3s ease;
    }
    .card:hover {
      transform: translateY(-2px);
      border-color: #5865f2;
    }
    .btn {
      padding: 0.5rem 1rem;
      border-radius: 6px;
      font-weight: 500;
      transition: all 0.2s ease;
    }
    .btn-primary {
      background-color: #5865f2;
      color: white;
    }
    .btn-primary:hover {
      background-color: #4752c4;
    }
    .btn-success {
      background-color: #3ba55c;
      color: white;
    }
    .btn-success:hover {
      background-color: #2d7d46;
    }
    .input-field {
      background-color: #1a1b1e !important;
      border: 1px solid #1f1f1f;
      color: white;
      padding: 0.5rem;
      border-radius: 4px;
      width: 100%;
    }
    .input-field:focus {
      border-color: #5865f2;
      outline: none;
    }
    #toast {
      position: fixed;
      bottom: 20px;
      right: 20px;
      padding: 16px 24px;
      border-radius: 8px;
      color: white;
      font-weight: 500;
      opacity: 0;
      transform: translateY(100%);
      transition: all 0.3s ease;
      z-index: 1000;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }
    #toast.show {
      opacity: 1;
      transform: translateY(0);
    }
    #toast.success {
      background-color: #3ba55c;
    }
    #toast.error {
      background-color: #ed4245;
    }
    .toast-content {
      display: flex;
      align-items: center;
      gap: 8px;
    }
    .toast-icon {
      font-size: 1.2em;
    }
    /* Update dialog styling */
    dialog {
      background: #313338 !important;
      color: #ffffff;
      border: none !important;
      padding: 0;
      border-radius: 4px;
      max-width: 440px !important;
      width: 90% !important;
      position: fixed !important;
      top: 50% !important;
      left: 50% !important;
      transform: translate(-50%, -50%) !important;
      margin: 0 !important;
      box-shadow: 0 0 0 1px rgba(32,34,37,.6), 0 2px 10px 0 rgba(0,0,0,.2);
    }
    dialog::backdrop {
      background: rgba(0, 0, 0, 0.85);
    }
    dialog .input-field {
      background: #1e1f22 !important;
      border: none;
      color: #dbdee1;
      padding: 10px;
      border-radius: 3px;
      font-size: 16px;
      width: 100%;
    }
    dialog .input-field:focus {
      outline: none;
      box-shadow: 0 0 0 2px rgba(88,101,242,.3);
    }
    dialog .input-field::placeholder {
      color: #949ba4;
    }
    dialog label {
      color: #b5bac1;
      font-size: 12px;
      font-weight: 500;
      text-transform: uppercase;
      margin-bottom: 8px;
      display: block;
    }
    dialog p {
      color: #949ba4;
      font-size: 14px;
      margin-top: 8px;
    }
    dialog .btn {
      padding: 10px 24px;
      border-radius: 3px;
      font-size: 14px;
      font-weight: 500;
      transition: background-color 0.17s ease;
    }
    dialog .btn-cancel {
      background: transparent;
      color: #dbdee1;
    }
    dialog .btn-cancel:hover {
      background: rgba(215,218,222,0.1);
    }
    dialog .btn-primary {
      background: #5865f2;
    }
    dialog .btn-primary:hover {
      background: #4752c4;
    }
    input[type="file"] {
      background: #1a1b1e !important;
      color: #ffffff;
      border: 1px solid #1f1f1f;
      border-radius: 4px;
      padding: 8px;
    }
    input[type="file"]::-webkit-file-upload-button {
      background: #5865f2;
      color: white;
      border: none;
      padding: 8px 12px;
      border-radius: 4px;
      cursor: pointer;
    }
    input[type="file"]::-webkit-file-upload-button:hover {
      background: #4752c4;
    }
  </style>
</head>
<body class="min-h-screen p-4">
  <div class="container mx-auto max-w-6xl">
    <!-- Console Section -->
    <div class="mb-8">
      <div class="flex justify-between items-center mb-3">
        <h2 class="text-xl font-medium">Console</h2>
        <button onclick="clearConsole()" class="text-sm text-gray-400 hover:text-white">
          <i class="fas fa-trash-alt mr-1"></i> Clear
        </button>
      </div>
      <div id="console" class="bg-[#1e1e1e] text-white p-4 rounded-lg border border-[#2d2d2d] h-[300px] overflow-y-auto font-mono text-sm leading-relaxed"></div>
    </div>

    <!-- Header -->
    <div class="flex justify-between items-center mb-8">
      <h1 class="text-2xl font-bold">Backup Manager</h1>
      <div class="flex gap-4">
        <div class="card p-3">
          <span class="block text-xl font-bold"><%= items.filter(item => item.type === 'dm').length %></span>
          <span class="text-sm text-gray-400">DMs</span>
        </div>
        <div class="card p-3">
          <span class="block text-xl font-bold"><%= items.filter(item => item.type === 'guild').length %></span>
          <span class="text-sm text-gray-400">Servers</span>
        </div>
      </div>
    </div>

    <!-- Main Grid -->
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 mb-8">
      <% items.forEach(item => { %>
        <div class="card p-4 fade-in">
          <div class="flex items-center gap-3 mb-3">
            <% if (item.avatar) { %>
              <img src="<%= item.avatar %>" alt="<%= item.name %>" class="w-10 h-10 rounded-full">
            <% } else { %>
              <div class="w-10 h-10 rounded-full bg-gray-700 flex items-center justify-center">
                <i class="fas <%= item.type === 'guild' ? 'fa-server' : 'fa-user' %> text-gray-400"></i>
              </div>
            <% } %>
            <div class="min-w-0">
              <h3 class="font-medium truncate"><%= item.name %></h3>
              <span class="text-sm text-gray-400">
                <%= item.type === 'guild' ? 'Server' : 'DM' %>
              </span>
            </div>
          </div>
          <div class="flex gap-2">
            <button onclick="backupItem('<%= item.id %>', '<%= item.type %>')" class="btn btn-success flex-1">
              <i class="fas fa-save mr-2"></i> Backup
            </button>
            <button onclick="openRestoreDialog('<%= item.id %>', '<%= item.type %>')" class="btn btn-primary flex-1">
              <i class="fas fa-upload mr-2"></i> Restore
            </button>
          </div>
        </div>
      <% }) %>
    </div>

    <!-- Manual Restore Section -->
    <div class="grid md:grid-cols-2 gap-6">
      <!-- Upload Backup -->
      <div class="card p-4">
        <h3 class="text-lg font-medium mb-4">Upload Backup</h3>
        <form id="uploadRestoreForm" class="space-y-4">
          <div>
            <label class="block text-sm text-gray-400 mb-1">Backup File</label>
            <input type="file" name="backupFile" accept=".json" required 
                   class="input-field bg-[#1e1f22] text-white p-2 rounded w-full">
          </div>
          <div>
            <label class="block text-sm text-gray-400 mb-1">Target Channel ID</label>
            <input type="text" name="targetId" required placeholder="Enter target channel ID" 
                   class="input-field">
            <p class="text-sm text-gray-400 mt-1">Channel where messages will be restored</p>
          </div>
          <button type="submit" class="btn btn-primary w-full">
            <i class="fas fa-upload mr-2"></i> Upload & Restore
          </button>
        </form>
      </div>

      <!-- DM Restore -->
      <div class="card p-4">
        <h3 class="text-lg font-medium mb-4">Manual DM Restore</h3>
        <form id="manualDMRestoreForm" class="space-y-4">
          <div>
            <label class="block text-sm text-gray-400 mb-1">Source User ID</label>
            <input type="text" name="sourceId" required placeholder="Enter source user ID" class="input-field">
          </div>
          <div>
            <label class="block text-sm text-gray-400 mb-1">Target Channel ID</label>
            <input type="text" name="targetId" required placeholder="Enter target channel ID" class="input-field">
          </div>
          <button type="submit" class="btn btn-primary w-full">
            <i class="fas fa-sync-alt mr-2"></i> Restore DM
          </button>
        </form>
      </div>

      <!-- Server Restore -->
      <div class="card p-4">
        <h3 class="text-lg font-medium mb-4">Manual Server Restore</h3>
        <form id="manualServerRestoreForm" class="space-y-4">
          <div>
            <label class="block text-sm text-gray-400 mb-1">Source Server ID</label>
            <input type="text" name="sourceId" required placeholder="Enter source server ID" class="input-field">
          </div>
          <div>
            <label class="block text-sm text-gray-400 mb-1">Target Server ID</label>
            <input type="text" name="targetId" required placeholder="Enter target server ID" class="input-field">
          </div>
          <div class="space-y-2">
            <label class="flex items-center">
              <input type="checkbox" name="restoreChannels" checked class="mr-2">
              <span class="text-sm text-gray-400">Restore Channels</span>
            </label>
          </div>
          <button type="submit" class="btn btn-primary w-full">
            <i class="fas fa-sync-alt mr-2"></i> Restore Server
          </button>
        </form>
      </div>
    </div>
  </div>

  <!-- Restore Dialog -->
  <dialog id="restoreDialog" class="w-full max-w-md">
    <div class="p-4 border-b border-[#1f1f1f] bg-[#2b2d31]">
      <h3 class="text-[#f2f3f5] text-base font-semibold">Restore Backup</h3>
    </div>
    <div class="p-4 bg-[#313338]">
      <div class="mb-4">
        <label class="block mb-2">Target ID</label>
        <input type="text" id="targetChannelId" placeholder="Enter target ID" class="input-field">
        <p>
          For DM restore: Enter the target channel ID<br>
          For Server restore: Enter the target server ID
        </p>
      </div>
      <div id="restoreProgress" class="hidden">
        <div class="flex items-center gap-2 text-sm text-[#b5bac1]">
          <i class="fas fa-spinner fa-spin"></i>
          <span id="restoreStatus">Restoring...</span>
        </div>
      </div>
    </div>
    <div class="p-4 bg-[#2b2d31] flex justify-end gap-3">
      <button onclick="closeRestoreDialog()" class="btn btn-cancel">Cancel</button>
      <button onclick="restoreToChannel()" id="restoreButton" class="btn btn-primary">
        <i class="fas fa-upload mr-2"></i>Restore
      </button>
    </div>
  </dialog>

  <!-- Toast -->
  <div id="toast" class="hidden">
    <div class="toast-content">
      <i class="toast-icon"></i>
      <span class="toast-message"></span>
    </div>
  </div>

  <script>
    const consoleDiv = document.getElementById('console');
    const restoreModal = document.getElementById('restoreModal');
    const targetIdInput = document.getElementById('targetId');
    const clearServerCheckbox = document.getElementById('clearServer');
    const restoreSettingsCheckbox = document.getElementById('restoreSettings');
    let currentBackupId = null;
    let currentBackupType = null;
    let currentChannelId = null;
    const restoreDialog = document.getElementById('restoreDialog');
    let currentItemType = null;
    const maxLogEntries = 1000; // Maximum number of log entries to keep

    function logToConsole(message, type = 'info') {
      const timestamp = new Date().toLocaleTimeString();
      const logEntry = document.createElement('div');
      logEntry.className = `log-entry ${type} mb-1`;
      
      // Color coding based on message type
      const colors = {
        info: '#5865f2',    // Discord blue
        success: '#3ba55c', // Green
        error: '#ed4245',   // Red
        warning: '#faa61a'  // Yellow
      };

      // Format the log entry with timestamp and appropriate color
      logEntry.innerHTML = `<span class="text-gray-500">[${timestamp}]</span> <span style="color: ${colors[type]}">${message}</span>`;
      
      // Add the new log entry
      consoleDiv.appendChild(logEntry);
      
      // Auto-scroll to bottom
      consoleDiv.scrollTop = consoleDiv.scrollHeight;
      
      // Trim old entries if exceeding maxLogEntries
      while (consoleDiv.children.length > maxLogEntries) {
        consoleDiv.removeChild(consoleDiv.firstChild);
      }
    }

    function clearConsole() {
      consoleDiv.innerHTML = '';
      logToConsole('Console cleared', 'info');
    }

    function openRestoreModal(backupId, type) {
      currentBackupId = backupId;
      currentBackupType = type;
      restoreModal.style.display = 'block';
    }

    function closeRestoreModal() {
      restoreModal.style.display = 'none';
    }

    function showToast(message, isError = false) {
      const toast = document.getElementById('toast');
      const icon = toast.querySelector('.toast-icon');
      const messageEl = toast.querySelector('.toast-message');
      
      // Set message and icon
      messageEl.textContent = message;
      icon.className = 'toast-icon fas ' + (isError ? 'fa-times-circle' : 'fa-check-circle');
      
      // Set toast type
      toast.classList.add('show');
      setTimeout(() => {
        toast.classList.remove('show');
      }, 3000);
    }

    async function backupItem(id, type) {
      try {
        const endpoint = type === 'dm' ? '/backup-dm' : '/backup-guild';
        const payload = type === 'dm' ? { channelId: id } : { serverId: id };
        const entityType = type === 'dm' ? 'DM' : 'server';

        logToConsole(`Starting ${entityType} backup for ID: ${id}...`, 'info');

        const response = await fetch(endpoint, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(payload)
        });

        const data = await response.json();
        
        if (response.ok) {
          logToConsole(`✓ ${entityType} backup completed successfully!`, 'success');
          if (data.details) {
            const { totalMessages, skippedChannels, channelsProcessed } = data.details;
            if (type === 'guild') {
              logToConsole(`└─ Messages: ${totalMessages}, Channels: ${channelsProcessed}${skippedChannels > 0 ? `, Skipped: ${skippedChannels}` : ''}`, 'info');
            }
          }
          showToast(data.message || 'Backup completed successfully!');
        } else {
          throw new Error(data.error || 'Backup failed');
        }
      } catch (error) {
        logToConsole(`✗ Backup failed: ${error.message}`, 'error');
        showToast(error.message, true);
      }
    }

    async function restoreBackup(id, type) {
      const input = document.createElement('input');
      input.type = 'file';
      input.accept = '.json';
      
      input.onchange = async function() {
        if (!input.files[0]) return;
        
        // Get the target channel ID from the form
        const targetChannelId = document.querySelector('input[name="channelId"]').value;
        if (!targetChannelId) {
          showToast('Please enter a target channel ID', true);
          return;
        }
        
        const formData = new FormData();
        formData.append('backupFile', input.files[0]);
        formData.append('channelId', targetChannelId); // Use the entered channel ID
        formData.append('type', type);
        
        try {
          showToast('Starting restore...');
          
          const response = await fetch('/restore-with-webhook', {
            method: 'POST',
            body: formData
          });

          const data = await response.json();
          if (response.ok) {
            showToast(data.message);
          } else {
            throw new Error(data.error || 'Restore failed');
          }
        } catch (error) {
          showToast(error.message, true);
        }
      };

      input.click();
    }

    async function fetchServerChannels(serverId) {
      const channelSelect = document.getElementById('channelSelect');
      channelSelect.disabled = true;
      channelSelect.innerHTML = '<option value="">Loading channels...</option>';

      try {
        const response = await fetch(`/server-channels/${serverId}`);
        const data = await response.json();

        if (response.ok) {
          // Group channels by category
          const channelsByCategory = data.channels.reduce((acc, channel) => {
            if (!acc[channel.parent]) {
              acc[channel.parent] = [];
            }
            acc[channel.parent].push(channel);
            return acc;
          }, {});

          // Clear and populate the select
          channelSelect.innerHTML = '<option value="">Select a channel</option>';

          // Add channels grouped by category
          Object.entries(channelsByCategory).forEach(([category, channels]) => {
            const optgroup = document.createElement('optgroup');
            optgroup.label = category;
            
            channels.forEach(channel => {
              const option = document.createElement('option');
              option.value = channel.id;
              option.textContent = `#${channel.name}`;
              optgroup.appendChild(option);
            });

            channelSelect.appendChild(optgroup);
          });

          channelSelect.disabled = false;
        } else {
          channelSelect.innerHTML = '<option value="">Error loading channels</option>';
          logToConsole(`Failed to fetch channels: ${data.error}`, true);
        }
      } catch (error) {
        channelSelect.innerHTML = '<option value="">Error loading channels</option>';
        logToConsole(`Failed to fetch channels: ${error.message}`, true);
      }
    }

    function switchTab(tab) {
      // Remove active class from all tabs and content
      document.querySelectorAll('.tab-button').forEach(btn => btn.classList.remove('active-tab'));
      document.querySelectorAll('.content-section').forEach(section => section.classList.remove('active'));

      // Add active class to selected tab and content
      document.getElementById(`${tab}Tab`).classList.add('active-tab');
      document.getElementById(`${tab}Content`).classList.add('active');
    }

    function toggleRestoreType(type) {
      const serverBtn = document.getElementById('serverRestoreBtn');
      const messagesBtn = document.getElementById('messagesRestoreBtn');
      const serverForm = document.getElementById('serverRestoreForm');
      const messagesForm = document.getElementById('channelMessagesRestoreForm');

      if (type === 'server') {
        serverBtn.classList.remove('opacity-50');
        messagesBtn.classList.add('opacity-50');
        serverForm.classList.remove('hidden');
        messagesForm.classList.add('hidden');
      } else {
        serverBtn.classList.add('opacity-50');
        messagesBtn.classList.remove('opacity-50');
        serverForm.classList.add('hidden');
        messagesForm.classList.remove('hidden');
      }
    }

    function toggleMessageRestoreType(type) {
      const dmBtn = document.getElementById('dmRestoreBtn');
      const channelBtn = document.getElementById('channelRestoreBtn');
      const dmForm = document.getElementById('dmRestoreForm');
      const channelForm = document.getElementById('channelRestoreForm');

      if (type === 'dm') {
        dmBtn.classList.remove('opacity-50');
        channelBtn.classList.add('opacity-50');
        dmForm.classList.remove('hidden');
        channelForm.classList.add('hidden');
      } else {
        dmBtn.classList.add('opacity-50');
        channelBtn.classList.remove('opacity-50');
        dmForm.classList.add('hidden');
        channelForm.classList.remove('hidden');
      }
    }

    // Update the DM restore form submission
    document.getElementById('dmRestoreForm').addEventListener('submit', async function(e) {
      e.preventDefault();
      
      const channelId = this.querySelector('input[name="channelId"]').value;
      const backupFile = this.querySelector('input[name="backupFile"]').files[0];
      
      if (!channelId || !backupFile) {
        showToast('Please fill in all required fields', true);
        return;
      }
      
      const formData = new FormData();
      formData.append('backupFile', backupFile);
      formData.append('channelId', channelId);
      
      try {
        showToast('Starting restore...');
        
        const response = await fetch('/restore-with-webhook', {
          method: 'POST',
          body: formData
        });

        const data = await response.json();
        if (response.ok) {
          showToast(data.message);
        } else {
          throw new Error(data.error || 'Restore failed');
        }
      } catch (error) {
        showToast(error.message, true);
      }
    });

    function openRestoreDialog(channelId, type) {
      currentChannelId = channelId;
      currentItemType = type; // Use the passed type directly
      restoreDialog.showModal();
    }

    function closeRestoreDialog() {
      const restoreButton = document.getElementById('restoreButton');
      const restoreProgress = document.getElementById('restoreProgress');
      const targetChannelId = document.getElementById('targetChannelId');
      
      // Reset dialog state
      restoreButton.disabled = false;
      restoreProgress.classList.add('hidden');
      targetChannelId.value = '';
      
      restoreDialog.close();
      currentChannelId = null;
      currentItemType = null;
    }

    async function restoreToChannel() {
      const targetChannelId = document.getElementById('targetChannelId').value;
      const restoreButton = document.getElementById('restoreButton');
      const restoreProgress = document.getElementById('restoreProgress');
      const restoreStatus = document.getElementById('restoreStatus');
      
      if (!targetChannelId) {
        showToast('Please enter a target channel ID', true);
        logToConsole('Error: Missing target channel ID', 'error');
        return;
      }

      try {
        restoreButton.disabled = true;
        restoreProgress.classList.remove('hidden');
        restoreStatus.textContent = 'Starting restore...';
        
        logToConsole('Starting restore process...', 'info');
        logToConsole(`Source: ${currentItemType} ${currentChannelId}`, 'info');
        logToConsole(`Target: ${targetChannelId}`, 'info');
        
        const response = await fetch('/restore', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            backupId: currentChannelId,
            targetId: targetChannelId,
            type: currentItemType
          })
        });

        const data = await response.json();
        if (response.ok) {
          restoreStatus.textContent = 'Restore completed successfully!';
          showToast(data.message);
          logToConsole(data.message, 'success');
          
          setTimeout(() => {
            closeRestoreDialog();
          }, 1500);
        } else {
          throw new Error(data.error || 'Restore failed');
        }
      } catch (error) {
        restoreStatus.textContent = `Error: ${error.message}`;
        showToast(error.message, true);
        logToConsole(`Restore Error: ${error.message}`, 'error');
      } finally {
        if (restoreStatus.textContent.startsWith('Error:')) {
          setTimeout(() => {
            restoreProgress.classList.add('hidden');
          }, 3000);
        }
        restoreButton.disabled = false;
      }
    }

    // Server restore form handler
    document.getElementById('serverRestoreForm').addEventListener('submit', async function(e) {
        e.preventDefault();
        
        const formData = new FormData(this);
        const serverId = formData.get('serverId');
        const backupFile = formData.get('backupFile');

        if (!serverId || !backupFile) {
            showToast('Please fill in all required fields', true);
            return;
        }

        try {
            showToast('Starting server restore...');
            
            const response = await fetch('/restore-server', {
                method: 'POST',
                body: formData // Send the FormData directly
            });

            const data = await response.json();
            
            if (response.ok) {
                showToast(data.message);
                // Clear form after successful restore
                this.reset();
            } else {
                throw new Error(data.error || data.details || 'Server restore failed');
            }
        } catch (error) {
            showToast(error.message, true);
            Logger.error('Server restore error:', error);
        }
    });

    // Channel messages restore form handler
    document.getElementById('channelMessagesRestoreForm').addEventListener('submit', async function(e) {
        e.preventDefault();
        
        const formData = new FormData(this);
        const channelId = formData.get('channelId');
        const backupFile = formData.get('backupFile');
        const serverId = document.getElementById('serverIdForChannels').value;

        if (!channelId || !backupFile) {
            showToast('Please fill in all required fields', true);
            return;
        }

        try {
            showToast('Starting message restore...');
            
            const response = await fetch('/restore-with-webhook', {
                method: 'POST',
                body: formData
            });

            const data = await response.json();
            
            if (response.ok) {
                showToast(data.message);
                this.reset();
            } else {
                throw new Error(data.error || data.details || 'Message restore failed');
            }
        } catch (error) {
            showToast(error.message, true);
            Logger.error('Message restore error:', error);
        }
    });

    // Manual DM Restore Form Handler
    document.getElementById('manualDMRestoreForm').addEventListener('submit', async (e) => {
      e.preventDefault();
      const formData = new FormData(e.target);
      const data = {
        backupId: formData.get('sourceId'),
        targetId: formData.get('targetId'),
        type: 'dm'
      };

      try {
        showToast('Starting DM restore...');
        logToConsole(`Starting DM restore from ${data.backupId} to ${data.targetId}...`);
        
        const response = await fetch('/restore', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(data)
        });

        const result = await response.json();
        if (response.ok) {
          showToast(result.message || 'DM restore successful!');
          logToConsole(result.message || 'DM restore successful!');
          e.target.reset();
        } else {
          throw new Error(result.error || 'Failed to restore DM');
        }
      } catch (error) {
        showToast(error.message, true);
        logToConsole(`DM Restore Error: ${error.message}`, true);
      }
    });

    // Manual Server Restore Form Handler
    document.getElementById('manualServerRestoreForm').addEventListener('submit', async (e) => {
      e.preventDefault();
      const formData = new FormData(e.target);
      const data = {
        backupId: formData.get('sourceId'),
        targetId: formData.get('targetId'),
        type: 'guild',
        clearServer: formData.get('restoreChannels') === 'on'
      };

      try {
        showToast('Starting server restore...');
        logToConsole(`Starting server restore from ${data.backupId} to ${data.targetId}...`);
        
        const response = await fetch('/restore', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(data)
        });

        const result = await response.json();
        if (response.ok) {
          showToast(result.message || 'Server restore successful!');
          logToConsole(result.message || 'Server restore successful!');
          e.target.reset();
        } else {
          throw new Error(result.error || 'Failed to restore server');
        }
      } catch (error) {
        showToast(error.message, true);
        logToConsole(`Server Restore Error: ${error.message}`, true);
      }
    });

    // Add upload form handler
    document.getElementById('uploadRestoreForm').addEventListener('submit', async (e) => {
      e.preventDefault();
      const formData = new FormData(e.target);
      const targetId = formData.get('targetId');
      const file = formData.get('backupFile');

      if (!targetId || !file) {
        showToast('Please fill in all required fields', true);
        return;
      }

      try {
        showToast('Starting restore from uploaded file...');
        logToConsole('Starting restore from uploaded file...');

        const response = await fetch('/restore-with-webhook', {
          method: 'POST',
          body: formData
        });

        const result = await response.json();
        if (response.ok) {
          showToast(result.message || 'Restore completed successfully!');
          logToConsole(result.message || 'Restore completed successfully!');
          e.target.reset();
        } else {
          throw new Error(result.error || 'Failed to restore from uploaded file');
        }
      } catch (error) {
        showToast(error.message, true);
        logToConsole(`Restore Error: ${error.message}`, true);
      }
    });
  </script>
</body>
</html>
 